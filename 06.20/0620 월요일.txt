0620 월요일
<출석체크>
09:10
김민균, 남욱, 남재욱, 안두홍, 양승학, 장민지, 전세연


<공지사항>

<학습목표>
---------------총 복습---------------------
JDK(Java Development Kit), JRE(Java Runtime Environment)
,JVM(Java Virtual Machine) , JAVAC(Java Compiler)
환경변수 설정
	운영체제에서 JDK, JRE, CLASSPATH등의 경로를 참조하기 위해서.
	참조하지 않는다면 실행할때마다 그 파일이 있는 풀 경로를 적어줘야 되기 때문에 귀찮고
	실수하기 쉽기 때문
변수  Variable. 변할수 있는 수(자료)
	데이터타입 변수명; //선언. declare
	데이터타입 변수명 = 값;	//초기화. Initialize
	1. 값을 반복하여 사용할때
	2. 값에 이름을 붙여줄때
자료형	  DataType
	- 원시형 데이터타입(8개). call by value
		- 논리형 : boolean
		- 문자형 : char
		- 정수형 : byte, short, int, long
		- 실수형 : float, double
	- 참조형 데이터타입. call by reference
		원시형 데이터타입을 제외한 모든 데이터타입
		new 생성자로 호출한다.
연산자
	사칙연산(+-*/)  %나머지   **제곱
	++, --, 
	+=, -=, *=, /=
	||, &&
조건문 반복문
	if(조건1){
		조건1이 만족할시 실행할 문장;
	}else if(조건2){
		조건1이 만족하지 않고 조건2가 만족할때 실행할 문장;
	}else if (조건3){
		조건1, 조건2가 만족하지 않고 조건3이 만족할때 실행할 문장;
	}else{
		위의 모든 조건에 만족하지 않을때 실행할 문장;
	}
	
	for
		for(자료형 이름; 조건; 본문을실행한후실행할스텝){
			본문;
		}
	while
		while(조건){
			조건을 만족하는 동안 반복해서 실행할 문장;
		}
	do-while
		while과 같은데 실행을 먼저하고 조건검사.
	향상된 for
		for(자료형 이름 : 이터레이터){
			모든요소에대해 실행할 문장;
		}
배열
	같은 자료형이 순서대로 늘어선 자료구조
	인덱스는 0부터 시작한다.
	길이(크기)는 초기화된것에서 바꿀수 없다.
	들어있는 요소의 크기가 아니라 초기화된 크기가 저장된다.
메소드
	특정 역할을 하는 코드를 반복해서 사용(호출) 할때 사용
	접근제한자 리턴타입 메소드명(파라미터타입 파라미터명, ...){
		본문;
		return 값;
	}
객체
	현실에서 프로그래밍으로 옮길 대상
	자바에서는 '클래스'라는 설계도가 객체를 만드는 것이다.
	설계도대로 실제 물리적 객체를 구현한것이 '인스턴스'다.
	인스턴스가 되어야 비로소 메모리에 올라가고, 그안의 변수와 메소드를 사용할 수 있다.
	new 생성자(매개변수)  를 통해서 인스턴스를 만든다.
생성자
	메소드와 형태가 거의비슷한데 리턴타입이 없고 이름이 클래스명과 같다.
	목적 : 인스턴스화 하기위해 반드시 필요한 데이터를 명시
		데이터가 준비되지 않았다면 인스턴스화 할 수 없게 한다.
상속
	부모의 클래스에 있는 변수와 메소드를 그대로 물려받아서
	자식 클래스에는 소스가 없더라도 사용할 수 있게 되는것
	자식클래스 extends 부모클래스
추상클래스
	abstract 메소드가 하나이상 있는 클래스
	클래스 앞에도 abstract키워드를 붙여줘야 한다.
	추상클래스로는 인스턴스를 만들 수 없다.
	자식 클래스에 공통적으로 갖고있는 코드를 중복하지 않기 위해 부모에다가 묶은 개념이다.
인터페이스
	어떤 함수가 있어야 하는지에 대한 약속.
	리턴타입, 함수이름, 파라미터 타입, 파라미터 갯수 를 약속해놓고
	구현체에서는 반드시 그 함수들을 오버라이드 해줘야 한다.
	구현클래스명 implements 인터페이스
접근제한자
	변수나 메소드를 해당 클래스 외부에 어느정도로 노출한것인지에 대한 키워드
	private : 해당 클래스에서만
	default : 같은 패키지 내에서만
	protected : default + 상속받은 클래스
	public : 프로젝트내 어디서나
오버라이드, 오버로드
	override : 자식에서 덮어쓰는 것
	overload : 파라미터가 다를경우 다른함수같이 작동되는 것
예외처리
	프로그래머가 미리 예측하여 막을수 있는 에러를 미리 처리해놓는 것
	try{
		예외가 발생할수도 있는 문장;
	}
	catch(예외클래스 클래스명){
		예외처리;
	}
	finally{
		예외를 처리하든 못하든 반드시 처리할 문장;
	}
	
Object클래스
	모든객체의 최종 조상.
	toString, equals, clone 등의 함수가 있다.
---------------총 복습 끝---------------------
1. 상수, enum

2. 멀티쓰레드

<5판 3선승제 컴퓨터와 가위바위보 게임>
유저로부터 화면에 입력받기
랜덤
배열
이겼다 졌다 판단해서 출력. 비기면 재게임. 
조건문, 반복문
-> 

위의 개발에다가 
방금 배운 쓰레드로 타이머 만들기 : 유저가 낼 차례가 되면 5에서 카운트다운
시간될때까지 내지못하면 1패 적립


-> 
원래는 사용자의 입력을 받을때까지 아무작업안하고 기다렸는데
멀티쓰레드로 타이머가 돌아가면서 3초안에 입력안하면 지게 만들기.

<개발 설계 해보기>
	<필수>
1. 컴퓨터가 랜덤 선택하기   Math.random()	//0부터 1사이의 랜덤실수
2. 유저의 선택 받기		Scanner sc = new Scanner(System.in);
					sc.nextLine();	//String형태로 입력받음
					next = 공백 전까지 받고    space, tab, \n 다 포함
					nextline = 엔터키 \n 전까지 받고	
					nextInt = int만 받고 int로 변환
3. 결과 판단하기			문자열비교는 ==가 아니라 .equals
4. 1,2,3을 게임이 끝날때까지 반복하기
5. 게임이 끝나면 최종 스코어 알려주고 끝내기

------------------------------
	<상급자>   상위20%
1. 타이머 생성후 테스트	Thread.sleep(1000);	//1초간 행동을 멈춤
					5부터 1까지 줄어드는 반복문을
					1초씩 행동을 멈추면서 찍으면 그게 5초타이머
2. 하나의 게임만 타이머 적용해보기
		타이머는 5초를 셀 뿐이다.
		게임을 컨트롤하는곳에 유저입력이 됐는지 체크하는 flag의 값을 참조하여
		true가 되면 return;
		run함수를 종료하게 되고. 쓰레드는 자신이 가지고있는 자원을 정상적으로 반납한다.
------------------------------
	1,2명
1. 다수에 게임에 타이머 적용해보기

=> 유저의 입력이 들어왔나 안들어왔나 판단하는 flag가 true
  &&
  현재 돌고있는 타이머가 생성된 게임의회차가   현재게임의 회차와 같은지
  다른경우 = 새로운 게임을 했다는 말.    이전의 타이머는 종료


아직 모르겠다. -> 4 
데이터분석가 -> 4
웹개발자(풀스택) -> 2
프론트엔드 -> 0
백엔드 -> 7
창업 -> 1
선택과 집중. 프로젝트 팀짤때부터 고려 하도록

2가지 리소스
- 최종프로젝트를 돈벌면서 할 수 있는 기회
  20만원.
  200만원.
- 웹개발자 4자리(채용 꽂아줄수있는곳). 3600



누구와 어떤 주제로 프로젝트를 할지
하고싶은것. 하고싶은게 딱히 없으면 하고싶은사람의 아이디어를 구현.
하고싶은게 없다면 대표적인 주제들 몇개 주면 그거 참고해서 개인의 취업 방향에 맞는것을 개발
이거든, 이거외든, 진로에 대한 상담


잘따라온사람은
RPG게임 업그레이드 : 시간이 지나면 체력과 마나를 회복하는 시스템 구현
	음수가 될수 없고, 최대를 넘어설수 없다.
	체력은 한번 0이 되어서 죽으면 시간에 의해 다시 회복되지 않는다.
	1초당 1, 	5초당 5
	
	체력회복 스킬을 쓴캐릭터는 스킬을 쓴시점부터 종료한 시점까지의 시간*회복력 만큼 체력회복
	그런데 모든 캐릭터는 기본적으로 자기가 태어날때 저 스킬을 쓴다면?
	이 말은 생성자에서 recover()호출
	모든 캐릭터가 자체적으로 조금씩 회복하는 자연치유 매커니즘이 구현된다.
잘 못따라 온 사람은 
	구현에 욕심부리지 말고 개념정리부터 백지에서 쓸수있을만큼
	
	
아까 준 최종소스에
	5초가 지나도 패가 올라가는데 엔터를 쳐야 패로 올라간다.
	왜냐하면 지금 gc.choiceRSP(); 을 호출하고 
	String result = sc.nextLine(); 여기에서 메인 스레드가 멈춰있기 때문
	이것도 해결하려면 유저의 키를 입력받는것도 쓰레드로 구현해야한다.